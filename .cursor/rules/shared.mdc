---
description: 
globs: 
alwaysApply: true
---
# AI Rules for VibeTravels

VibeTravels is a web app that generates detailed trip plans based on users' notes and travel preferences. Using artificial intelligence, the app converts simplified notes about places and destinations into specific, feasible itineraries for trips lasting one to five days.

It targets three main user segments: families, couples, and solo travelers. The system considers real-world factors such as the average time needed to visit attractions, travel time, and attraction closing days or holidays to create a realistic schedule.

Key features of VibeTravels include:
- A user account system with profiles that include travel preferences
- Creating notes about future trips
- AI-generated itineraries based on notes
- Viewing and filtering other users' trip plans
- Exporting plans to PDF format.

## Tech Stack

- Astro 5
- TypeScript 5
- React 19
- Tailwind 4
- Shadcn/ui

## Project Structure

When introducing changes to the project, always follow the directory structure below:

- `./src` - source code
- `./src/layouts` - Astro layouts
- `./src/pages` - Astro pages
- `./src/pages/api` - API endpoints
- `./src/middleware/index.ts` - Astro middleware
- `./src/db` - Supabase clients and types
- `./src/types.ts` - Shared types for backend and frontend (Entities, DTOs)
- `./src/components` - Client-side components written in Astro (static) and React (dynamic)
- `./src/components/ui` - Client-side components from Shadcn/ui
- `./src/lib` - Services and helpers 
- `./src/assets` - static internal assets
- `./public` - public assets

When modifying the directory structure, always update this section.

## Coding practices

### Guidelines for clean code

- Use feedback from linters to improve the code when making changes.
- Prioritize error handling and edge cases.
- Handle errors and edge cases at the beginning of functions.
- Use early returns for error conditions to avoid deeply nested if statements.
- Place the happy path last in the function for improved readability.
- Avoid unnecessary else statements; use if-return pattern instead.
- Use guard clauses to handle preconditions and invalid states early.
- Implement proper error logging and user-friendly error messages.
- Consider using custom error types or error factories for consistent error handling.
